name: Build & Release (Reusable)

on:
  workflow_call:
    inputs:
      app_name:         { type: string,  required: true }
      dockerfile:       { type: string,  required: true }
      context:          { type: string,  required: true }
      ecr_repo:         { type: string,  required: true }
      aws_region:       { type: string,  required: true }
      aws_role_arn:     { type: string,  required: true } # OIDC로 Assume할 Role
      gitops_repo:      { type: string,  required: true } # org/repo
      values_file:      { type: string,  required: true } # ex) charts/values-prod.yaml
      push_mode:        { type: string,  required: false, default: 'push' } # 'push' or 'pr'
      gitops_branch:    { type: string,  required: false, default: 'main' }
      build_system:     { type: string,  required: false, default: 'gradle' } # gradle|maven|node
      jdk_version:      { type: string,  required: false, default: '17' }
      node_version:     { type: string,  required: false, default: '20' }
    secrets:
      GITOPS_PAT:       { required: true, description: "PAT for gitops repo write" }

# 최소 권한(전역): 기본은 읽기. OIDC 위해 id-token만 전역 허용.
permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.app_name }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build image & push to ECR
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ inputs.aws_region }}
      ECR_REPO:   ${{ inputs.ecr_repo }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK
        if: ${{ inputs.build_system == 'gradle' || inputs.build_system == 'maven' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.jdk_version }}

      - name: Cache Gradle
        if: ${{ inputs.build_system == 'gradle' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ inputs.context }}/.gradle/caches
            ${{ inputs.context }}/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles(format('{0}/**/*.gradle*', inputs.context), format('{0}/gradle-wrapper.properties', inputs.context)) }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build (Gradle)
        if: ${{ inputs.build_system == 'gradle' }}
        working-directory: ${{ inputs.context }}
        run: ./gradlew clean test bootJar --no-daemon

      - name: Cache Maven
        if: ${{ inputs.build_system == 'maven' }}
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles(format('{0}/**/pom.xml', inputs.context)) }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build (Maven)
        if: ${{ inputs.build_system == 'maven' }}
        working-directory: ${{ inputs.context }}
        run: mvn -B -U -DskipTests=false clean package

      - name: Setup Node
        if: ${{ inputs.build_system == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: Build (Node)
        if: ${{ inputs.build_system == 'node' }}
        working-directory: ${{ inputs.context }}
        run: |
          npm ci
          npm test --if-present
          npm run build --if-present

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role_arn }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker
        id: image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ inputs.app_name }}-${{ github.ref_name }}-${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG -f "${{ inputs.dockerfile }}" "${{ inputs.context }}"
          docker push $ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG
          echo "image_repo=$ECR_REGISTRY/${ECR_REPO}" >> "$GITHUB_OUTPUT"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
    outputs:
      image_repo: ${{ steps.image.outputs.image_repo }}
      image_tag:  ${{ steps.image.outputs.image_tag }}

  gitops-update:
    name: Update GitOps values
    needs: build-and-push
    runs-on: ubuntu-latest

    # GitOps 반영 잡에서만 contents: write 권한 사용
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout GitOps repository (read/write)
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.gitops_repo }}
          ref:        ${{ inputs.gitops_branch }}
          token:      ${{ secrets.GITOPS_PAT }}
          path:       gitops
          fetch-depth: 0

      - name: Install yq
        uses: frenck/action-setup-yq@v1

      - name: Apply image to values file
        working-directory: gitops
        env:
          IMAGE_REPO: ${{ needs.build-and-push.outputs.image_repo }}
          IMAGE_TAG:  ${{ needs.build-and-push.outputs.image_tag }}
          VALUES_FILE: ${{ inputs.values_file }}
        run: |
          yq -i '.image.repository = env(IMAGE_REPO)' "$VALUES_FILE"
          yq -i '.image.tag = env(IMAGE_TAG)' "$VALUES_FILE"
          git status --porcelain

      - name: Commit (if changed)
        if: ${{ inputs.push_mode == 'push' }}
        working-directory: gitops
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git config user.name  "GitHub Actions Bot"
            git checkout -B ${{ inputs.gitops_branch }}
            git add "${{ inputs.values_file }}"
            git commit -m "chore(${ {inputs.app_name} }): update image to ${{ needs.build-and-push.outputs.image_tag }}"
            git push origin ${{ inputs.gitops_branch }}
            echo "Pushed to ${{ inputs.gitops_branch }}"
          else
            echo "No changes to commit"
          fi

      - name: Create Pull Request
        if: ${{ inputs.push_mode == 'pr' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token:       ${{ secrets.GITOPS_PAT }}
          path:        gitops
          commit-message: "chore(${ {inputs.app_name} }): update image to ${{ needs.build-and-push.outputs.image_tag }}"
          title:  "chore(${ {inputs.app_name} }): update image to ${{ needs.build-and-push.outputs.image_tag }}"
          body:   "Update image to `${{ needs.build-and-push.outputs.image_repo }}:${{ needs.build-and-push.outputs.image_tag }}`"
          branch: "ci/${{ inputs.app_name }}/image-${{ needs.build-and-push.outputs.image_tag }}"
          base:   ${{ inputs.gitops_branch }}
          labels: "ci,gitops,automation"
