name: Build & Push Template

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      context:
        required: true
        type: string
      ecr_repo:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      gitops_repo:
        required: true
        type: string
      values_file:
        required: true
        type: string
      build_system:
        required: false
        default: gradle
        type: string
      jdk_version:
        required: false
        default: '17'
        type: string
      node_version:
        required: false
        default: '20'
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ inputs.aws_region }}
      ECR_REPO:   ${{ inputs.ecr_repo }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        if: ${{ inputs.build_system == 'gradle' || inputs.build_system == 'maven' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.jdk_version }}

      - name: Cache Gradle
        if: ${{ inputs.build_system == 'gradle' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ inputs.context }}/.gradle/caches
            ${{ inputs.context }}/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles(format('{0}/**/*.gradle*', inputs.context), format('{0}/gradle-wrapper.properties', inputs.context)) }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build (Gradle)
        if: ${{ inputs.build_system == 'gradle' }}
        working-directory: ${{ inputs.context }}
        run: ./gradlew clean test bootJar --no-daemon

      - name: Cache Maven
        if: ${{ inputs.build_system == 'maven' }}
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles(format('{0}/**/pom.xml', inputs.context)) }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build (Maven)
        if: ${{ inputs.build_system == 'maven' }}
        working-directory: ${{ inputs.context }}
        run: mvn -B -U -e -DskipTests=false clean package

      - name: Setup Node
        if: ${{ inputs.build_system == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: Build (Node)
        if: ${{ inputs.build_system == 'node' }}
        working-directory: ${{ inputs.context }}
        run: |
          npm ci
          npm test --if-present
          npm run build --if-present

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::703671922786:role/myeks-github-actions-ecr-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ inputs.app_name }}-${{ github.ref_name }}-${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG -f "${{ inputs.dockerfile }}" "${{ inputs.context }}"
          docker push $ECR_REGISTRY/${ECR_REPO}:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_REPO=$ECR_REGISTRY/${ECR_REPO}" >> $GITHUB_ENV
          
      - name: Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.gitops_repo }}
          token: ${{ secrets.GITOPS_PAT }}
          path: gitops
          fetch-depth: 0

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update GitOps Values
        env:
          VALUES_FILE: ${{ inputs.values_file }}
        run: |
          cd gitops
          yq -i '.image.repository = "${{ env.IMAGE_REPO }}"' ${VALUES_FILE}
          yq -i '.image.tag = "${{ env.IMAGE_TAG }}"' ${VALUES_FILE}
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "GitHub Actions Bot"
          git add ${VALUES_FILE}
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update ${{ inputs.app_name }} image to ${{ env.IMAGE_TAG }}"
            git push
            echo "âœ… GitOps repository updated successfully"
          fi
